/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.epic.bmlalipay.action.controlpanel.systemconfiguration;

import com.epic.bmlalipay.bean.controlpanel.systemconfiguration.EODConfigInputBean;
import com.epic.bmlalipay.dao.controlpanel.systemconfiguration.EODConfigurationDAO;
import com.epic.bmlalipay.util.common.AccessControlService;
import com.epic.bmlalipay.util.common.Common;
import com.epic.bmlalipay.util.common.Validation;
import com.epic.bmlalipay.util.mapping.Commonconfiguration;
import com.epic.bmlalipay.util.mapping.Systemaudit;
import com.epic.bmlalipay.util.mapping.Task;
import com.epic.bmlalipay.util.varlist.CommonVarList;
import com.epic.bmlalipay.util.varlist.MessageVarList;
import com.epic.bmlalipay.util.varlist.PageVarList;
import com.epic.bmlalipay.util.varlist.SectionVarList;
import com.epic.bmlalipay.util.varlist.SessionVarlist;
import com.epic.bmlalipay.util.varlist.TaskVarList;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts2.ServletActionContext;

/**
 *
 * @author sivaganesan_t
 */
public class EODConfigurationAction extends ActionSupport implements ModelDriven<Object>, AccessControlService {

    EODConfigInputBean inputBean =new EODConfigInputBean();
    
    public Object getModel() {
        return inputBean;
    }
    
    public String execute() {
        System.out.println("called EODConfigurationAction : execute");
        return SUCCESS;
    }

    public boolean checkAccess(String method, String userRole) {
        boolean status = false;
        String page = PageVarList.EOD_CONFIG_PAGE;
        String task = null;
        if ("view".equals(method)) {
            task = TaskVarList.VIEW_TASK;
        } else if ("find".equals(method)) {
            task = TaskVarList.VIEW_TASK;
        } else if ("update".equals(method)) {
            task = TaskVarList.UPDATE_TASK;
            //start newly changed
        } 
        if ("execute".equals(method)) {
            status = true;
        } else {
            HttpServletRequest request = ServletActionContext.getRequest();
            status = new Common().checkMethodAccess(task, page, userRole, request);
        }
        return status;
    }
    
    private boolean applyUserPrivileges() {
        HttpServletRequest request = ServletActionContext.getRequest();
        List<Task> tasklist = new Common().getUserTaskListByPage(PageVarList.EOD_CONFIG_PAGE, request);

        inputBean.setVupdatelink(true);
        inputBean.setVupdatebutt(true);
        if (tasklist != null && tasklist.size() > 0) {
            for (Task task : tasklist) {
                if (task.getTaskcode().toString().equalsIgnoreCase(TaskVarList.UPDATE_TASK)) {
                    inputBean.setVupdatelink(false);
                    inputBean.setVupdatebutt(false);
                } 
            }
        }
        

        return true;
    }
     public String view() {
         String result = "view";
         try {
            if (this.applyUserPrivileges()) {

//                CommonDAO dao = new CommonDAO();
//                inputBean.setStatusList(dao.getDefultStatusList(CommonVarList.STATUS_CATEGORY_GENERAL));
//                inputBean.setDefaultStatus(CommonVarList.STATUS_ACTIVE);
                EODConfigurationDAO dao =new EODConfigurationDAO();
                setMappingDataToInputBean(dao.getEODConfiguration());
            } else {
                result = "loginpage";
            }
            HttpSession session = ServletActionContext.getRequest().getSession(false);
            if (session.getAttribute(SessionVarlist.MIN_PASSWORD_CHANGE_PERIOD) != null && session.getAttribute(SessionVarlist.ONLY_SHOW_ONTIME) != null) {
                if ((Integer) session.getAttribute(SessionVarlist.ONLY_SHOW_ONTIME) == 0) {
                    session.setAttribute(SessionVarlist.ONLY_SHOW_ONTIME, 1);
                    addActionError((String) session.getAttribute(SessionVarlist.MIN_PASSWORD_CHANGE_PERIOD));
                }
            }

            System.out.println("called EODConfigurationAction :view");

        } catch (Exception ex) {
            addActionError("EODConfiguration " + MessageVarList.COMMON_ERROR_PROCESS);
            Logger.getLogger(EODConfigurationAction.class.getName()).log(Level.SEVERE, null, ex);
        }
         return result;
     }
     
     public String find(){
        System.out.println("called EODConfigurationAction: find");
        Commonconfiguration comConfig =null;
        try {
//            if (inputBean.getId() != null && !inputBean.getId().isEmpty()) {

            EODConfigurationDAO dao = new EODConfigurationDAO();

            comConfig = dao.getEODConfiguration();
            this.setMappingDataToInputBean(comConfig);

//            } else {
//                inputBean.setMessage("Empty Page code.");
//            }
        } catch (Exception ex) {
            inputBean.setMessage("EODConfiguration " + MessageVarList.COMMON_ERROR_PROCESS);
            Logger.getLogger(EODConfigurationAction.class.getName()).log(Level.SEVERE, null, ex);
        }

        return "find";
     }
     
     public String update() {
        System.out.println("called EODConfigurationAction : update");
        String retType = "message";
        try {
            String message = this.validateUpdates();
            if (message.isEmpty()) {
                HttpServletRequest request = ServletActionContext.getRequest();
                EODConfigurationDAO dao = new EODConfigurationDAO();
                
                Systemaudit audit = Common.makeAudittrace(request, TaskVarList.UPDATE_TASK, PageVarList.EOD_CONFIG_PAGE, SectionVarList.SYSTEM_CONFIG, "EOD configuration ID " + CommonVarList.EOD_CONFIGURATION_ID + " updated", null, null, null);
                message = dao.updateEODConfiguration(inputBean, audit);
                
                if (message.isEmpty()) {
                    addActionMessage("EOD Configuration " + MessageVarList.COMMON_SUCC_UPDATE);
                } else {
                    addActionError(message);
                }
            } else {
                addActionError(message);
            }
        } catch (Exception ex) {
            Logger.getLogger(EODConfigurationAction.class.getName()).log(Level.SEVERE, null, ex);
            addActionError("EODConfiguration " + MessageVarList.COMMON_ERROR_UPDATE);
        }
        return retType;
     }
     public void setMappingDataToInputBean(Commonconfiguration comConfig){
         inputBean.setId(String.valueOf(comConfig.getId()));
         inputBean.setAlipaysettlementfile(comConfig.getAlipaysettlementfile());
         inputBean.setMerchantsettlementfile(comConfig.getMerchantsettlementfile());
         inputBean.setTxnamounttolerance(comConfig.getTxnamounttolerance().toString());
         inputBean.setTxnadaystolerance(Byte.toString(comConfig.getTxnadaystolerance()));
         inputBean.setBmlBankCode(comConfig.getBmlBankCode());
         inputBean.setEodlogpath(comConfig.getEodlogpath());
         inputBean.setBranchid(String.valueOf(comConfig.getBranchid()));
         
         String oldValue =CommonVarList.EOD_CONFIGURATION_ID+"|"+inputBean.getAlipaysettlementfile()+"|"+inputBean.getMerchantsettlementfile()+"|"+inputBean.getTxnamounttolerance()+"|"+inputBean.getTxnadaystolerance()+"|"+inputBean.getBmlBankCode()+"|"+inputBean.getEodlogpath()+"|"+inputBean.getBranchid();
         inputBean.setOldvalue(oldValue);
     }
     
     private String validateUpdates() {
        String message = "";
        if (inputBean.getAlipaysettlementfile()== null || inputBean.getAlipaysettlementfile().trim().isEmpty()) {
            message = MessageVarList.EOD_CONFIGURATION_EMPTY_ALIPAY_SETTLEMENT_FILE_PATH;
        } else if (inputBean.getMerchantsettlementfile()== null || inputBean.getMerchantsettlementfile().trim().isEmpty()) {
            message = MessageVarList.EOD_CONFIGURATION_EMPTY_MERCHANT_SETTLEMENT_FILE_PATH;
        } else if (inputBean.getTxnamounttolerance()== null || inputBean.getTxnamounttolerance().trim().isEmpty()) {
            message = MessageVarList.EOD_CONFIGURATION_EMPTY_TXN_AMOUNT_TOLERANCE;
         } else if (!Validation.isNumericDouble(inputBean.getTxnamounttolerance())) {
            message = MessageVarList.EOD_CONFIGURATION_INVALID_TXN_AMOUNT_TOLERANCE;
        } else if (inputBean.getTxnadaystolerance()== null || inputBean.getTxnadaystolerance().trim().isEmpty()) {
            message = MessageVarList.EOD_CONFIGURATION_EMPTY_TXN_DAYS_TOLERANCE;
        } else if (!Validation.isNumeric(inputBean.getTxnadaystolerance())) {
            message = MessageVarList.EOD_CONFIGURATION_INVALID_TXN_DAYS_TOLERANCE;
        } else if (inputBean.getBmlBankCode()== null || inputBean.getBmlBankCode().trim().isEmpty()) {
            message = MessageVarList.EOD_CONFIGURATION_EMPTY_BML_BANK_CODE;
        } else if (inputBean.getEodlogpath()== null || inputBean.getEodlogpath().trim().isEmpty()) {
            message = MessageVarList.EOD_CONFIGURATION_EMPTY_EOD_LOG_PATH;
        } else if (inputBean.getBranchid()== null || inputBean.getBranchid().trim().isEmpty()) {
            message = MessageVarList.EOD_CONFIGURATION_EMPTY_BRANCH_ID;
        }
        return message;
    }
}

