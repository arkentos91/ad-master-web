/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.epic.bmlalipay.dao.controlpanel.acquirer;

import com.epic.bmlalipay.bean.controlpanel.acquirer.MerhcantUserDataBean;
import com.epic.bmlalipay.bean.controlpanel.acquirer.MerhcantUserInputBean;
import com.epic.bmlalipay.dao.common.CommonDAO;
import com.epic.bmlalipay.util.common.Common;
import com.epic.bmlalipay.util.common.HibernateInit;
import com.epic.bmlalipay.util.mapping.Passwordpolicy;
import com.epic.bmlalipay.util.mapping.Status;
import com.epic.bmlalipay.util.mapping.Systemaudit;
import com.epic.bmlalipay.util.mapping.Systemuser;
import com.epic.bmlalipay.util.mapping.Userrole;
import com.epic.bmlalipay.util.varlist.CommonVarList;
import com.epic.bmlalipay.util.varlist.MessageVarList;
import com.epic.bmlalipay.util.varlist.SessionVarlist;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.servlet.http.HttpSession;
import org.apache.struts2.ServletActionContext;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author asitha_l
 */
public class MerchantUserDAO {

    public List<MerhcantUserDataBean> getSearchList(MerhcantUserInputBean inputBean, int rows, int from, String sortIndex, String sortOrder) throws Exception {
        List<Systemuser> searchList = null;
        List<MerhcantUserDataBean> dataBeanList = null;
        Session session = null;
        HttpSession hSession = ServletActionContext.getRequest().getSession(false);
        Systemuser sysUser = ((Systemuser) hSession.getAttribute(SessionVarlist.SYSTEMUSER));
        long fullCount = 0;
        if ("".equals(sortIndex.trim())) {
            sortIndex = null;
        }
        try {
            session = HibernateInit.sessionFactory.openSession();
            session.beginTransaction();
            Criteria criteria = session.createCriteria(Systemuser.class);
            criteria.createAlias("userrole", "userrole");
            criteria.createAlias("status", "status");

            if (sortIndex != null && sortOrder != null) {
                if (sortOrder.equals("asc")) {
                    criteria.addOrder(Order.asc(sortIndex));
                }
                if (sortOrder.equals("desc")) {
                    criteria.addOrder(Order.desc(sortIndex));
                }
            } else {
                criteria.addOrder(Order.desc("createtime"));
            }

            criteria.add(Restrictions.ne("status.statuscode", CommonVarList.STATUS_DELETE));
            criteria.add(Restrictions.ne("username", sysUser.getUsername()));
            criteria.add(Restrictions.eq("userrole.userrolecode", "MERC")); 

            fullCount = criteria.list().size();

            criteria.setFirstResult(from);
            criteria.setMaxResults(rows);

            searchList = criteria.list();
            dataBeanList = new ArrayList<MerhcantUserDataBean>();

            for (Systemuser user : searchList) {

                MerhcantUserDataBean systemUser = new MerhcantUserDataBean();

                try {
                    systemUser.setUsername(user.getUsername());
                } catch (NullPointerException npe) {
                    systemUser.setUsername("--");
                }
                try {
                    systemUser.setUserrole(user.getUserrole().getDescription());
                } catch (NullPointerException npe) {
                    systemUser.setUserrole("--");
                }
                try {
                    systemUser.setStatus(user.getStatus().getDescription());
                } catch (NullPointerException npe) {
                    systemUser.setStatus("--");
                }
                try {
                    systemUser.setUsernameUserrole(user.getUsername() + "|" + user.getUserrole().getDescription());
                } catch (NullPointerException npe) {
                    systemUser.setUsernameUserrole("--");
                }

                systemUser.setFullCount(fullCount);

                dataBeanList.add(systemUser);
            }
        } catch (Exception e) {
            throw e;
        } finally {
            try {
                session.flush();
                session.close();
            } catch (Exception e) {
                throw e;
            }
        }

        return dataBeanList;
    }

    //start newly changed
    public String activateUser(MerhcantUserInputBean inputBean, Systemaudit audit) throws Exception {
        Session session = null;
        Transaction txn = null;
        String message = "";
        try {
            session = HibernateInit.sessionFactory.openSession();
            txn = session.beginTransaction();

            Date sysDate = CommonDAO.getSystemDate(session);

//            User u = (User) session.get(User.class, inputBean.getUsername().trim());
            Systemuser u = this.getSystemUserByUserName2(inputBean.getUsername(), session);
            if (u != null) {

                audit.setCreatetime(sysDate);
                audit.setLastupdatedtime(sysDate);

                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                //modified (3/7/2014)
//                u.setPasswordexpirydate(formatter.parse(inputBean.getExpirydate()));

                Userrole ur = new Userrole();
                ur.setUserrolecode(inputBean.getUserrole());
                u.setUserrole(ur);

//                Systemuser dualAuthUSer = new Systemuser();
//                dualAuthUSer.setUsername(inputBean.getDualauthuser());
                u.setDualauthuserrole(inputBean.getDualauthuser());

                //Change status to 'Activate'
                Status status = new Status();
                status.setStatuscode(CommonVarList.STATUS_ACTIVE);
                u.setStatus(status);

                u.setNoofinvlidattempt("0");

                //if 'Active', change noofinvalidattempt to 0
                if ((inputBean.getStatus()).equals(CommonVarList.STATUS_ACTIVE)) {
//                u.setNoofinvlidattempt(0);
                }

                u.setFullname(inputBean.getFullname());
                u.setEmpid(inputBean.getServiceid());
                u.setAddress(inputBean.getAddress1());
//                u.setAddress2(inputBean.getAddress2());
//                u.setCity(inputBean.getCity());
                u.setMobile(inputBean.getContactno());
                u.setEmail(inputBean.getEmail());
//                u.setNic(inputBean.getNic());
//                u.setDateofbirth(formatter.parse(inputBean.getDateofbirth()));

                u.setLastupdatedtime(sysDate);

                session.save(audit);
                session.update(u);

                txn.commit();
            } else {
                message = MessageVarList.COMMON_NOT_EXISTS;
            }
        } catch (Exception e) {
            if (txn != null) {
                txn.rollback();
            }
            throw e;
        } finally {
            try {
                session.flush();
                session.close();
            } catch (Exception e) {
                throw e;
            }
        }
        return message;
    }

    //end newly changed
    public String insertSystemUser(MerhcantUserInputBean inputBean, Systemaudit audit) throws Exception {
        Session session = null;
        Transaction txn = null;
        String message = "";
        Calendar cal = Calendar.getInstance();
        try {
            session = HibernateInit.sessionFactory.openSession();
            Date sysDate = CommonDAO.getSystemDate(session);

            if (!isSystemUserExist(inputBean.getUsername())) {
                txn = session.beginTransaction();

                Systemuser user = new Systemuser();
                user.setUsername(inputBean.getUsername());
                user.setPassword(Common.mpiMd5(inputBean.getPassword()));

                // modified (3/7/2014)
                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                String sql = "select passwordexpiryperiod from Passwordpolicy";
                Query query = session.createQuery(sql);
                Iterator itCount = query.iterate();
                int expiryperiod = (Integer) itCount.next();
                cal.setTime(sysDate);
                cal.add(Calendar.DAY_OF_MONTH, expiryperiod);
                user.setExpirydate(cal.getTime());

//                user.setPasswordexpirydate(formatter.parse(inputBean.getExpirydate()));
                Userrole ur = new Userrole();
                ur.setUserrolecode(inputBean.getUserrole());
                user.setUserrole(ur);

//                Systemuser dualAuthUSer = new Systemuser();
//                dualAuthUSer.setUsername(inputBean.getDualauthuser());
//                user.setDualauthuserrole(inputBean.getDualauthuser());
                user.setDualauthuserrole("admin");
                Status st = new Status();
                st.setStatuscode(inputBean.getStatus());
                user.setStatus(st);

                user.setFullname(inputBean.getFullname().trim());
                user.setEmpid(inputBean.getServiceid().trim());
                user.setAddress(inputBean.getAddress1().trim());
//                user.setAddress2(inputBean.getAddress2());
                user.setCity(inputBean.getCity().trim());
                user.setMobile(inputBean.getContactno().trim());
                user.setEmail(inputBean.getEmail().trim());
                user.setNic(inputBean.getNic().trim());
                if (!inputBean.getDateofbirth().isEmpty()) {
                    user.setDateofbirth(formatter.parse(inputBean.getDateofbirth()));
                }
                user.setNoofinvlidattempt("0");//edited

                audit.setCreatetime(sysDate);
                audit.setLastupdatedtime(sysDate);

//                Systemuser lastUpdatedUser = new Systemuser();
//                lastUpdatedUser.setUsername(audit.getLastupdateduser().getUsername());
                user.setLastupdateduser(audit.getLastupdateduser());

                user.setLastupdatedtime(sysDate);
                user.setLoggeddate(sysDate);
                user.setInitialloginstatus("0");
                user.setCreatetime(sysDate);
                session.save(audit);
                session.save(user);

                txn.commit();
            } else {

                long count = 0;

                String sqlCount = "select count(username) from Systemuser as u where u.status.statuscode=:statuscode AND u.username=:username";
                Query queryCount = session.createQuery(sqlCount).setString("statuscode", CommonVarList.STATUS_DELETE)
                        .setString("username", inputBean.getUsername().trim());

                Iterator itCount = queryCount.iterate();
                count = (Long) itCount.next();

                if (count > 0) {
                    message = "$" + inputBean.getUsername().trim();
                } else {
                    message = MessageVarList.COMMON_ALREADY_EXISTS;
                }
//                message = MessageVarList.COMMON_ALREADY_EXISTS;
//                txn = session.beginTransaction();
//
//                User user = this.getSystemUserByUserName2(inputBean.getUsername(), session);
//
//                user.setPassword(Common.mpiMd5(inputBean.getPassword()));
//                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
//                user.setPasswordexpirydate(formatter.parse(inputBean.getExpirydate()));
//
//                Userrole ur = new Userrole();
//                ur.setUserrole(inputBean.getUserrole());
//                user.setUserrole(ur);
//
//                User dualAuthUSer = new User();
//                dualAuthUSer.setUsername(inputBean.getDualauthuser());
//                user.setUserByDualauthuser(dualAuthUSer);
//
//                Status st = new Status();
//                st.setStatuscode(CommonVarList.STATUS_ACTIVE);
//                user.setStatus(st);
//
//                //Status is 'Active', change noofinvalidattempt to 0
//                user.setNoofinvlidattempt(0);
//
//
//                user.setFullname(inputBean.getFullname());
//                user.setServiceid(inputBean.getServiceid());
//                user.setAddress1(inputBean.getAddress1());
//                user.setAddress2(inputBean.getAddress2());
//                user.setCity(inputBean.getCity());
//                user.setContactnumber(inputBean.getContactno());
//                user.setEmailaddress(inputBean.getEmail());
//                user.setNic(inputBean.getNic());
//                user.setDateofbirth(formatter.parse(inputBean.getDateofbirth()));
//
//                audit.setCreatedtime(sysDate);
//                audit.setLastupdatedtime(sysDate);
//
//                User lastUpdatedUser = new User();
//                lastUpdatedUser.setUsername(audit.getUser().getUsername());
//                user.setUserByLastupdateduser(lastUpdatedUser);
//
//                user.setLastupdatedtime(sysDate);
//                session.save(audit);
//                session.update(user);
//
//                txn.commit();

            }

        } catch (Exception e) {
            if (txn != null) {
                txn.rollback();
            }
            throw e;
        } finally {
            try {
                session.flush();
                session.close();
            } catch (Exception e) {
                throw e;
            }
        }
        return message;
    }

    public Passwordpolicy getPasswordPolicyDetails() throws Exception {
        Passwordpolicy passwordpolicy = null;
        Session session = null;
        try {
            session = HibernateInit.sessionFactory.openSession();
            session.beginTransaction();
            Criteria criteria = session.createCriteria(Passwordpolicy.class);
            passwordpolicy = (Passwordpolicy) criteria.list().get(0);

        } catch (Exception e) {
            throw e;
        } finally {
            try {
                session.flush();
                session.close();
            } catch (Exception e) {
                throw e;
            }
        }
        return passwordpolicy;
    }

    private boolean isSystemUserExist(String username) throws Exception {
        List<Systemuser> userList = new ArrayList<Systemuser>();
        Session session = null;
        boolean userCheckStatus = false;
        try {
            session = HibernateInit.sessionFactory.openSession();
            session.beginTransaction();
            Criteria criteria = session.createCriteria(Systemuser.class);
            criteria.add(Restrictions.eq("username", username));
            userList = (List<Systemuser>) criteria.list();

            for (Systemuser user : userList) {
                userCheckStatus = true;
            }

        } catch (Exception e) {
            throw e;
        } finally {
            try {
                session.flush();
                session.close();
            } catch (Exception e) {
                throw e;
            }
        }
        return userCheckStatus;
    }

    public Systemuser getSystemUserByUserName(String username) throws Exception {
        Systemuser user = null;
        Session session = null;
        try {

            session = HibernateInit.sessionFactory.openSession();
            String sql = "from Systemuser as su where su.username=:username";

            Query query = session.createQuery(sql);
            query.setString("username", username);

            user = (Systemuser) query.list().get(0);

        } catch (Exception e) {
            throw e;
        } finally {
            try {
                session.flush();
                session.close();
            } catch (Exception e) {
                throw e;
            }
        }
        return user;
    }

    public Systemuser getSystemUserByUserName2(String username, Session session) throws Exception {//call via update method
        Systemuser user = null;
        try {

            String sql = "from Systemuser as su where su.username=:username";

            Query query = session.createQuery(sql);
            query.setString("username", username);

            user = (Systemuser) query.list().get(0);

        } catch (Exception e) {
            throw e;
        } finally {
            try {
            } catch (Exception e) {
                throw e;
            }
        }
        return user;
    }

    public void findUsersByUserRole(MerhcantUserInputBean inputBean, int currUserLevel) throws Exception {
        List<Systemuser> userList = new ArrayList<Systemuser>();
        Session session = null;
        try {
            session = HibernateInit.sessionFactory.openSession();
            session.beginTransaction();
            Criteria criteria = session.createCriteria(Systemuser.class);
            criteria.createAlias("userrole", "ur")
                    .createAlias("ur.userlevel", "ul");
            criteria.add(Restrictions.le("ul.levelid", currUserLevel));
            userList = (List<Systemuser>) criteria.list();

            for (Systemuser user : userList) {
                inputBean.getDualAuthUserMap().put(user.getUsername(), user.getUsername());
            }

        } catch (Exception e) {
            throw e;
        } finally {
            try {
                session.flush();
                session.close();
            } catch (Exception e) {
                throw e;
            }
        }
    }

    public long getCurrUsersUserLevel(String userrole) throws Exception {
        Session session = null;
        Userrole userRole = null;
//        int userLevel = 8;
        long userLevel = 8;
        try {
            session = HibernateInit.sessionFactory.openSession();
            session.beginTransaction();
            Criteria criteria = session.createCriteria(Userrole.class);
            criteria.add(Restrictions.eq("userrolecode", userrole));
            userRole = (Userrole) criteria.list().get(0);
            userLevel = userRole.getUserlevel().getLevelid();

        } catch (Exception e) {
            throw e;
        } finally {
            try {
                session.flush();
                session.close();
            } catch (Exception e) {
                throw e;
            }
        }
        return userLevel;
    }

    public String updateSystemUser(MerhcantUserInputBean inputBean, Systemaudit audit) throws Exception {
        Session session = null;
        Transaction txn = null;
        String message = "";
        Systemuser user = null;
        try {
            session = HibernateInit.sessionFactory.openSession();
            Date sysDate = CommonDAO.getSystemDate(session);

            txn = session.beginTransaction();

            user = this.getSystemUserByUserName2(inputBean.getUsername(), session);

            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            //modified (3/7/2014)
//            user.setPasswordexpirydate(formatter.parse(inputBean.getExpirydate()));

            Userrole ur = new Userrole();
            ur.setUserrolecode(inputBean.getUserrole());
            user.setUserrole(ur);

//            Systemuser dualAuthUSer = new Systemuser();
//            dualAuthUSer.setUsername(inputBean.getDualauthuser());
            user.setDualauthuserrole(inputBean.getDualauthuser());

            user.setDualauthuserrole("admin");
            Status st = new Status();
            st.setStatuscode(inputBean.getStatus());
            user.setStatus(st);

            //if 'Active', change noofinvalidattempt to 0 and loggeddate to now
            if ((inputBean.getStatus()).equals(CommonVarList.STATUS_ACTIVE)) {
                user.setNoofinvlidattempt("0");
                user.setLoggeddate(sysDate);
            }

            user.setFullname(inputBean.getFullname().trim());
            user.setEmpid(inputBean.getServiceid().trim());
            user.setAddress(inputBean.getAddress1().trim());
//            user.setAddress2(inputBean.getAddress2());
            user.setCity(inputBean.getCity().trim());
            user.setMobile(inputBean.getContactno().trim());
            user.setEmail(inputBean.getEmail().trim());
            user.setNic(inputBean.getNic().trim());

            if (!inputBean.getDateofbirth().isEmpty()) {
                user.setDateofbirth(formatter.parse(inputBean.getDateofbirth()));
            }

            audit.setCreatetime(sysDate);
            audit.setLastupdatedtime(sysDate);

            Systemuser lastUpdatedUser = new Systemuser();
            lastUpdatedUser.setUsername(audit.getLastupdateduser());
            user.setLastupdateduser(audit.getLastupdateduser());

            user.setLastupdatedtime(sysDate);
            session.save(audit);
            session.update(user);

            txn.commit();

        } catch (Exception e) {
            if (txn != null) {
                txn.rollback();
            }
            throw e;
        } finally {
            try {
                session.flush();
                session.close();
            } catch (Exception e) {
                throw e;
            }
        }
        return message;
    }

    public String deleteSystemUser(MerhcantUserInputBean inputBean, Systemuser currentUser, Systemaudit audit) throws Exception {
        Session session = null;
        Transaction txn = null;
        String message = "";

        try {
            session = HibernateInit.sessionFactory.openSession();
            txn = session.beginTransaction();

            Date sysDate = CommonDAO.getSystemDate(session);

            Systemuser user = (Systemuser) this.getSystemUserByUserName(inputBean.getUsername());

            // Check whether login user and requested to delete user are same            
            if (user.getUsername().equals(currentUser.getUsername())) {
                message = user.getUsername() + MessageVarList.SYSUSER_DEL_INVALID;
            } else {

                long flag = 0;
                String sql = "select count(systemauditid) from Systemaudit as u where u.lastupdateduser=:user";
                Query query = session.createQuery(sql).setString("user", inputBean.getUsername().trim());
                Iterator itCount1 = query.iterate();
                flag = (Long) itCount1.next();

                if (flag > 0) {
                    message = MessageVarList.COMMON_ALREADY_IN_USE;
                } else {

                    audit.setCreatetime(sysDate);
                    audit.setLastupdatedtime(sysDate);

                    session.save(audit);
                    session.delete(user);

                    txn.commit();
                }
            }

        } catch (Exception e) {
            if (txn != null) {
                txn.rollback();
            }
            throw e;
        } finally {
            try {
                session.flush();
                session.close();
            } catch (Exception e) {
                throw e;
            }
        }
        return message;
    }

    public String updatePasswordReset(MerhcantUserInputBean inputBean, Systemaudit audit) throws Exception {
        Session session = null;
        Transaction txn = null;
        String message = "";
        try {
            session = HibernateInit.sessionFactory.openSession();
            txn = session.beginTransaction();
            Date sysDate = CommonDAO.getSystemDate(session);

            Systemuser u = (Systemuser) session.get(Systemuser.class, inputBean.getHusername().trim());

            if (u != null) {

                u.setPassword(inputBean.getRenewpwd());
//                Systemuser lastUpdatedUser = new Systemuser();
//                lastUpdatedUser.setUsername(audit.getLastupdateduser().getUsername());
                u.setLastupdateduser(audit.getLastupdateduser());
                u.setLastupdatedtime(sysDate);

                audit.setCreatetime(sysDate);
                audit.setLastupdatedtime(sysDate);

                session.save(audit);
                session.update(u);

                txn.commit();
            } else {
                message = MessageVarList.COMMON_NOT_EXISTS;
            }
        } catch (Exception e) {
            if (txn != null) {
                txn.rollback();
            }
            throw e;
        } finally {
            try {
                session.flush();
                session.close();
            } catch (Exception e) {
                throw e;
            }
        }
        return message;
    }
}
